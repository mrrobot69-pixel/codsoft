import tkinter as tk
from tkinter import messagebox
from tkcalendar import Calendar
from ttkthemes import ThemedStyle

class TodoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List App")
        self.style = ThemedStyle(root)
        self.style.set_theme("plastik")

        # Change colors
        self.root.configure(bg="#f0f0f0")

        self.date_label = tk.Label(root, text="Select Date:", bg="#f0f0f0")
        self.date_label.pack(pady=5)

        self.cal = Calendar(root, selectmode="day", year=2024, month=3, day=19)
        self.cal.pack(pady=5)
        self.cal.bind("<<CalendarSelected>>", self.show_tasks_for_date)

        self.task_entry = tk.Entry(root, width=50)
        self.task_entry.pack(pady=5)

        button_frame = tk.Frame(root)  # Create a frame for the buttons
        button_frame.pack()

        self.add_button = tk.Button(button_frame, text="Add Task", command=self.add_task, bg="#007bff", fg="#ffffff")
        self.add_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.update_button = tk.Button(button_frame, text="Update Task", command=self.update_task, bg="#28a745", fg="#ffffff")
        self.update_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.delete_button = tk.Button(button_frame, text="Delete Task", command=self.delete_task, bg="#dc3545", fg="#ffffff")
        self.delete_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.show_all_button = tk.Button(button_frame, text="Show All Tasks", command=self.show_all_tasks, bg="#ffc107", fg="#000000")
        self.show_all_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.task_listbox = tk.Listbox(root, width=60, height=10)
        self.task_listbox.pack(pady=10)

        self.tasks = {}  # Dictionary to store tasks by date
        self.load_tasks()

        # Set window size
        self.root.geometry("500x400")

    def add_task(self):
        selected_date = self.cal.get_date()
        task = self.task_entry.get()
        if task:
            if selected_date in self.tasks:
                self.tasks[selected_date].append(task)
            else:
                self.tasks[selected_date] = [task]
            self.task_listbox.insert(tk.END, f"{task} ({selected_date})")
            self.task_entry.delete(0, tk.END)
            self.save_tasks()
        else:
            messagebox.showwarning("Warning", "Task cannot be empty!")

    def delete_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            task_with_date = self.task_listbox.get(selected_index[0])
            task, date = task_with_date.split(" (")
            date = date[:-1]
            self.task_listbox.delete(selected_index)
            self.tasks[date].remove(task)
            if not self.tasks[date]:
                del self.tasks[date]
            self.save_tasks()
        else:
            messagebox.showwarning("Warning", "Please select a task to delete!")

    def update_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            task_with_date = self.task_listbox.get(selected_index[0])
            task, date = task_with_date.split(" (")
            date = date[:-1]
            new_task = self.task_entry.get()
            if new_task:
                self.tasks[date].remove(task)
                if not self.tasks[date]:
                    del self.tasks[date]
                if date in self.tasks:
                    self.tasks[date].append(new_task)
                else:
                    self.tasks[date] = [new_task]
                self.task_listbox.delete(selected_index)
                self.task_listbox.insert(selected_index, f"{new_task} ({date})")
                self.task_entry.delete(0, tk.END)
                self.save_tasks()
            else:
                messagebox.showwarning("Warning", "Task cannot be empty!")
        else:
            messagebox.showwarning("Warning", "Please select a task to update!")

    def save_tasks(self):
        with open("tasks.txt", "w") as file:
            for date, tasks in self.tasks.items():
                for task in tasks:
                    file.write(f"{task} ({date})\n")

    def load_tasks(self):
        try:
            with open("tasks.txt", "r") as file:
                for line in file:
                    task_with_date = line.strip()
                    if " (" in task_with_date:
                        task, date = task_with_date.rsplit(" (", 1)
                        date = date[:-1]
                        if date in self.tasks:
                            self.tasks[date].append(task)
                        else:
                            self.tasks[date] = [task]
                        self.task_listbox.insert(tk.END, f"{task} ({date})")
        except FileNotFoundError:
            pass

    def show_tasks_for_date(self, event=None):
        selected_date = self.cal.get_date()
        self.task_listbox.delete(0, tk.END)
        if selected_date in self.tasks:
            for task in self.tasks[selected_date]:
                self.task_listbox.insert(tk.END, f"{task} ({selected_date})")

    def show_all_tasks(self):
        self.task_listbox.delete(0, tk.END)
        for date, tasks in self.tasks.items():
            for task in tasks:
                self.task_listbox.insert(tk.END, f"{task} ({date})")

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoListApp(root)
    root.mainloop()
